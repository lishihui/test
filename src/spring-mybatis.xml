<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:c="http://www.springframework.org/schema/c" xmlns:cache="http://www.springframework.org/schema/cache" xmlns:context="http://www.springframework.org/schema/context" xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee" xmlns:lang="http://www.springframework.org/schema/lang" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p" xmlns:task="http://www.springframework.org/schema/task" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
	
	<!-- nginx redis负载均衡 
	<context:component-scan base-package="com.jsoft.testspring"/>
	<context:annotation-config/>
	<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
	    <property name="hostName" value="127.0.0.1" />
	    <property name="port" value="6379" />
	</bean>   
	<bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
	    <property name="connectionFactory" ref="jedisConnectionFactory" />
	</bean>   
	<bean id="redisHttpSessionConfiguration"  class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration" >
	   <property name="maxInactiveIntervalInSeconds" value="120" />
	</bean>
	-->
	<!-- nginx redis负载均衡 -->
   
	<!-- 引入日志拦截 -->	
	<bean id="taskExecutor"   
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">  
		<property name="corePoolSize" value="5" />  
		<property name="maxPoolSize" value="10" />  
		<property name="WaitForTasksToCompleteOnShutdown" value="true" />  
	</bean>  
	
	<!-- 自动扫描 -->
	<context:component-scan base-package="com.module" />

	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:jdbc.properties" />
		
		<!--UReport2  启动过程中系统会报各种属性找不到的异常  -->
		<property name="ignoreUnresolvablePlaceholders" value="true"></property>
		<property name="order" value="1"></property>
	</bean>
 
	<!-- 阿里 druid 数据库连接池 -->  
	<bean id = "dataSource" class = "com.alibaba.druid.pool.DruidDataSource" destroy-method = "close" >    
           <!-- 数据库基本信息配置 -->  
           <property name = "url" value = "${url}" />    
           <property name = "username" value = "${username}" />    
           <property name = "password" value = "${password}" />    
           <property name = "driverClassName" value = "${driver}" />    
           <property name = "filters" value = "stat" />    
           <!-- 最大并发连接数 -->  
           <property name = "maxActive" value = "20" />  
           <!-- 初始化连接数量 -->  
           <property name = "initialSize" value = "1" />  
           <!-- 配置获取连接等待超时的时间 -->  
           <property name = "maxWait" value = "60000" /> 
           <!-- 最小空闲连接数 -->  
           <property name = "minIdle" value = "10" />   
           <!-- 最大空闲连接数   弃用
           <property name = "maxIdle" value = "15" />  
           -->
           <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
           <property name = "timeBetweenEvictionRunsMillis" value ="60000" />  
           <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
           <property name = "minEvictableIdleTimeMillis" value ="300000" />    
           <property name = "validationQuery" value = "select 1 from dual" />    
           <property name = "testWhileIdle" value = "true" />    
           <property name = "testOnBorrow" value = "false" />    
           <property name = "testOnReturn" value = "false" />    
           <property name = "maxOpenPreparedStatements" value ="20" />  
           <!-- 打开 removeAbandoned 功能 -->  
           <property name = "removeAbandoned" value = "true" />  
           <!-- 1800 秒，也就是 30 分钟 -->  
           <property name = "removeAbandonedTimeout" value ="1800" />  
           <!-- 关闭 abanded 连接时输出错误日志 -->     
           <property name = "logAbandoned" value = "true" />  
	</bean>  

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件-->
		<property name="mapperLocations">
            <list>
                <value>classpath:com/module/sqlmap/*/*.xml</value>
                <value>classpath:com/module/sqlmap/*/*/*.xml</value>
            </list>
        </property>
		
		<property name="configLocation" value="classpath:mybatis.xml" />
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.module.dao.*" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

    <!-- 拦截器方式配置事物 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="com.util.AppException"/>
			<tx:method name="append*" propagation="REQUIRED" rollback-for="com.util.AppException"/>
			<tx:method name="save*" propagation="REQUIRED" rollback-for="com.util.AppException"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="com.util.AppException"/>
			<tx:method name="modify*" propagation="REQUIRED" rollback-for="com.util.AppException"/>
			<tx:method name="edit*" propagation="REQUIRED" rollback-for="com.util.AppException"/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="com.util.AppException"/>
			<tx:method name="remove*" propagation="REQUIRED" rollback-for="com.util.AppException"/>
			<tx:method name="init" propagation="REQUIRED" rollback-for="com.util.AppException"/>
			<tx:method name="trans*" propagation="REQUIRED" rollback-for="com.util.AppException"/>
			<tx:method name="audit*" propagation="REQUIRED" rollback-for="com.util.AppException"/>
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="com.util.AppException"/>

			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="load*" propagation="REQUIRED" read-only="true" />
			<tx:method name="search*" propagation="REQUIRED" read-only="true" />
			<tx:method name="datagrid*" propagation="REQUIRED" read-only="true" />

			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="transactionPointcut" expression="execution(* com.*.service..*Impl.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
	</aop:config>

	
</beans>